{"sections":[],"metadata":{"role":"article","modules":[{"name":"Swift Bitcoin"}],"roleHeading":"Article","title":"Running"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"kind":"article","abstract":[{"type":"text","text":"Swift Bitcoin comes with two executables:"}],"seeAlsoSections":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building"],"anchor":"Essentials"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"A client or ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"node","type":"text"}]},{"text":" service called ","type":"text"},{"type":"codeVoice","code":"bcnode"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A command line utility named "},{"code":"bcutil","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"type":"heading","level":2,"text":"Run using the `swift` command","anchor":"Run-using-the-swift-command"},{"type":"paragraph","inlineContent":[{"text":"To start a node use ","type":"text"},{"type":"codeVoice","code":"swift run bcnode"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check the node’s status use "},{"code":"swift run bcutil status","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","level":2,"text":"Build and run executables directly","anchor":"Build-and-run-executables-directly"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To produce executables with "},{"code":"release","type":"codeVoice"},{"type":"text","text":" configuration use "},{"type":"codeVoice","code":"swift build -c release"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Now you can start a node with "},{"type":"codeVoice","code":".build\/release\/bcnode"},{"type":"text","text":" or use the utility with "},{"type":"codeVoice","code":".build\/release\/bcutil"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Run-with-docker","text":"Run with docker"},{"level":3,"text":"Interactive container","type":"heading","anchor":"Interactive-container"},{"inlineContent":[{"text":"To start an interactive container based on the official docker image use ","type":"text"},{"type":"codeVoice","code":"docker run --rm -it -v $PWD:\/opt\/swift-bitcoin swift"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"From there you can run all the commands from the previous section:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"sh","code":["cd \/opt\/swift-bitcoin","swift run bcutil"]},{"anchor":"Build-executable-docker-images","text":"Build executable docker images","level":3,"type":"heading"},{"inlineContent":[{"text":"Build both executable images ","type":"text"},{"code":"bcnode","type":"codeVoice"},{"type":"text","text":" and "},{"code":"bcutil","type":"codeVoice"},{"text":" from Swift Bitcoin’s project root:","type":"text"}],"type":"paragraph"},{"syntax":"sh","code":["docker build --target bcnode -t bcnode -f tools\/Dockerfile .","docker build --target bcutil -t bcutil -f tools\/Dockerfile ."],"type":"codeListing"},{"anchor":"Simulate-a-muilt-node-network","level":2,"text":"Simulate a muilt-node network","type":"heading"},{"inlineContent":[{"type":"text","text":"Docker can help connect multiple nodes together."}],"type":"paragraph"},{"anchor":"Setup","type":"heading","text":"Setup","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"First create a docker network named "},{"type":"codeVoice","code":"bitcoin-regtest"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"docker network create bitcoin-regtest"},{"type":"text","text":"."}]},{"type":"heading","text":"Alice","level":3,"anchor":"Alice"},{"inlineContent":[{"type":"text","text":"Run Alice’s node using the docker image "},{"code":"docker run --rm -it --network bitcoin-regtest --name alice bcnode -n regtest","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"On another terminal query the node’s status and request to start listening for peer-to-peer connections using ","type":"text"},{"type":"codeVoice","code":"docker run --rm --network bitcoin-regtest bcutil -n regtest -h alice status"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To make it easier to run further commands we can create an alias and change our terminal prompt:","type":"text"}]},{"code":["alias bcutil=\"docker run --rm --network bitcoin-regtest bcutil -n regtest -h alice\"","prompt=\"alice: \"","bcutil start-p2p"],"type":"codeListing","syntax":"sh"},{"level":3,"anchor":"Bob","text":"Bob","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"On a new terminal window start Bob’s node with ","type":"text"},{"code":"docker run --rm -it --network bitcoin-regtest --name bob bcnode -n regtest","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"And create an alias for Bob’s "},{"code":"bcutil","type":"codeVoice"},{"text":" command:","type":"text"}],"type":"paragraph"},{"code":["alias bcutil=\"docker run --rm --network bitcoin-regtest bcutil -n regtest -h bob\"","prompt=\"bob: \""],"syntax":"sh","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Request Bob’s node to connect to Alice’s and check its status:"}],"type":"paragraph"},{"syntax":"sh","code":["bcutil connect -i alice","bcutil status"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"We can also enable Bob to receive connections with ","type":"text"},{"type":"codeVoice","code":"bcutil start-p2p"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"On Alice’s terminal double check that a connection is active using ","type":"text"},{"type":"codeVoice","code":"bcutil status"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Carol-Bitcoin-Core","text":"Carol (Bitcoin Core)"},{"inlineContent":[{"type":"text","text":"Adding Bitcoin Core to the mix can be done using a similar approach with "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/craigwrong\/bitcoin-lightning-node\/blob\/develop\/docker\/bitcoind\/Dockerfile"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Assuming you have ","type":"text"},{"type":"codeVoice","code":"bitcoind"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"bitcoin-cli"},{"text":" built as docker images, you can start Bitcoin Core nodes in the same ","type":"text"},{"type":"codeVoice","code":"regtest"},{"type":"text","text":" network as your Swift Bitcoin nodes:"}]},{"code":["docker run --name carol --rm -it --network bitcoin-regtest -v \/bitcoin_auth\/ bitcoind -chain=regtest -disablewallet -txindex -server -rpcallowip=0.0.0.0\/0 -rpcbind=0.0.0.0 -rpccookiefile=\/bitcoin_auth\/cookie"],"syntax":"sh","type":"codeListing"},{"inlineContent":[{"type":"text","text":"We use a custom volume to store the authentication cookie which we read from when running the "},{"code":"bitcoin-cli","type":"codeVoice"},{"text":" image for which we’ll also create an alias:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"sh","code":["alias bcutil=\"docker run --rm --network bitcoin-regtest --volumes-from carol bitcoin-cli -regtest -rpcconnect=carol  -rpccookiefile=\/bitcoin_auth\/cookie\"","prompt=\"carol: \"","bitcoin-cli -getinfo"]},{"type":"paragraph","inlineContent":[{"text":"From Alice’s terminal you can connect to Carol’s Bitcoin Core instance using ","type":"text"},{"code":"bcutil connect -i carol","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Verify connection on Carol’s node: ","type":"text"},{"code":"bitcoin-cli getpeerinfo","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To connect from Bitcoin Core to Swift Bitcoin use ","type":"text"},{"type":"codeVoice","code":"bitcoin-cli addnode bob onetry"},{"type":"text","text":"."}]}]}],"variants":[{"paths":["\/documentation\/bitcoin\/running"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","interfaceLanguage":"swift"},"references":{"doc://Bitcoin/documentation/Bitcoin":{"role":"collection","kind":"symbol","title":"Swift Bitcoin","type":"topic","abstract":[{"type":"text","text":"Pure-Swift Bitcoin client implementation with full node capabilities."}],"url":"\/documentation\/bitcoin","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin"},"doc://Bitcoin/documentation/Bitcoin/Building":{"abstract":[{"type":"text","text":"To build Swift Bitcoin you’ll either need Docker or a working copy of the Swift Toolchain installed on your system."}],"url":"\/documentation\/bitcoin\/building","role":"article","title":"Building","kind":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","type":"topic"},"https://github.com/craigwrong/bitcoin-lightning-node/blob/develop/docker/bitcoind/Dockerfile":{"type":"link","titleInlineContent":[{"text":"docker executable images","type":"text"}],"url":"https:\/\/github.com\/craigwrong\/bitcoin-lightning-node\/blob\/develop\/docker\/bitcoind\/Dockerfile","identifier":"https:\/\/github.com\/craigwrong\/bitcoin-lightning-node\/blob\/develop\/docker\/bitcoind\/Dockerfile","title":"docker executable images"},"doc://Bitcoin/documentation/Bitcoin/GettingStarted":{"type":"topic","title":"Getting Started","url":"\/documentation\/bitcoin\/gettingstarted","kind":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","role":"article","abstract":[{"text":"To start using Swift Bitcoin just add it as a dependency to your package manifest.","type":"text"}]}}}