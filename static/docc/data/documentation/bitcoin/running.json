{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift Bitcoin comes with two executables:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A client or ","type":"text"},{"inlineContent":[{"type":"text","text":"node"}],"type":"emphasis"},{"text":" service called ","type":"text"},{"code":"bcnode","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"A command line utility named ","type":"text"},{"type":"codeVoice","code":"bcutil"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"They can be run in debug mode using ","type":"text"},{"type":"codeVoice","code":"swift run"},{"type":"text","text":" or from Xcode on Mac. You can also use Docker to run them interactively or as standalone container images."}],"type":"paragraph"},{"anchor":"Run-from-the-Swift-command-line","text":"Run from the Swift command line","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"To start a node use ","type":"text"},{"type":"codeVoice","code":"swift run bcnode"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"To check the node’s status use "},{"type":"codeVoice","code":"swift run bcutil status"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Build and run executables directly","type":"heading","level":2,"anchor":"Build-and-run-executables-directly"},{"inlineContent":[{"text":"To produce executables with ","type":"text"},{"type":"codeVoice","code":"release"},{"text":" configuration use ","type":"text"},{"type":"codeVoice","code":"swift build -c release"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Now you can start a node with ","type":"text"},{"type":"codeVoice","code":".build\/release\/bcnode"},{"text":" or use the utility with ","type":"text"},{"type":"codeVoice","code":".build\/release\/bcutil"},{"text":".","type":"text"}]},{"anchor":"Overriding-ports","level":3,"text":"Overriding ports","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To run two nodes concurrently you will need to override some ports on the second instance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First run your main node as usual with "},{"code":"swift run bcnode","type":"codeVoice"},{"text":". You can start listening on the default port by ","type":"text"},{"code":"swift run bcutil start-p2p","type":"codeVoice"},{"type":"text","text":" on another terminal tab."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the second node use "},{"type":"codeVoice","code":"swift run bcnode -p 9332"},{"text":" and ","type":"text"},{"code":"swift run bcutil -p 9332 status","type":"codeVoice"},{"type":"text","text":" to query it. To start listening on an alternative P2P port use "},{"code":"swift run bcutil -p 9332 start-p2p -q 9333","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To have the first node connect to the second node use ","type":"text"},{"type":"codeVoice","code":"swift run bcutil connect -q 9333"},{"type":"text","text":". Or vice-versa to connect the second to the first: "},{"code":"swift run bcutil -p 9332 connect","type":"codeVoice"},{"type":"text","text":" – you’ll need to disconnect using "},{"code":"swift run bcutil disconnect <CLIENT_LOCAL_PORT>","type":"codeVoice"},{"text":" before trying a connection in the opposite direction.","type":"text"}]},{"level":2,"anchor":"Run-with-docker","type":"heading","text":"Run with docker"},{"level":3,"type":"heading","anchor":"Interactive-container","text":"Interactive container"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To start an interactive container based on the official docker image use "},{"code":"docker run --rm -it -v $PWD:\/opt\/swift-bitcoin swift","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"From there you can run all the commands from the previous section:","type":"text"}]},{"syntax":"sh","code":["cd \/opt\/swift-bitcoin","swift run bcutil"],"type":"codeListing"},{"anchor":"Build-executable-docker-images","text":"Build executable docker images","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Build both executable images ","type":"text"},{"code":"bcnode","type":"codeVoice"},{"type":"text","text":" and "},{"code":"bcutil","type":"codeVoice"},{"text":" from Swift Bitcoin’s project root:","type":"text"}]},{"syntax":"sh","code":["docker build --target bcnode -t bcnode -f tools\/Dockerfile .","docker build --target bcutil -t bcutil -f tools\/Dockerfile ."],"type":"codeListing"},{"level":2,"anchor":"Simulate-a-muilt-node-network","text":"Simulate a muilt-node network","type":"heading"},{"inlineContent":[{"type":"text","text":"Docker can help connect multiple nodes together."}],"type":"paragraph"},{"anchor":"Setup","level":3,"text":"Setup","type":"heading"},{"inlineContent":[{"text":"First create a docker network named ","type":"text"},{"type":"codeVoice","code":"bitcoin-regtest"},{"type":"text","text":" using "},{"code":"docker network create bitcoin-regtest","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"Alice","text":"Alice","type":"heading"},{"inlineContent":[{"text":"Run Alice’s node using the docker image ","type":"text"},{"type":"codeVoice","code":"docker run --rm -it --network bitcoin-regtest --name alice bcnode -n regtest"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"On another terminal query the node’s status and request to start listening for peer-to-peer connections using "},{"type":"codeVoice","code":"docker run --rm --network bitcoin-regtest bcutil -n regtest -h alice status"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To make it easier to run further commands we can create an alias and change our terminal prompt:","type":"text"}],"type":"paragraph"},{"syntax":"sh","type":"codeListing","code":["alias bcutil=\"docker run --rm --network bitcoin-regtest bcutil -n regtest -h alice\"","prompt=\"alice: \"","bcutil start-p2p"]},{"text":"Bob","level":3,"anchor":"Bob","type":"heading"},{"inlineContent":[{"text":"On a new terminal window start Bob’s node with ","type":"text"},{"type":"codeVoice","code":"docker run --rm -it --network bitcoin-regtest --name bob bcnode -n regtest"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And create an alias for Bob’s "},{"type":"codeVoice","code":"bcutil"},{"type":"text","text":" command:"}]},{"code":["alias bcutil=\"docker run --rm --network bitcoin-regtest bcutil -n regtest -h bob\"","prompt=\"bob: \""],"syntax":"sh","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Request Bob’s node to connect to Alice’s and check its status:","type":"text"}]},{"syntax":"sh","type":"codeListing","code":["bcutil connect -i alice","bcutil status"]},{"inlineContent":[{"text":"We can also enable Bob to receive connections with ","type":"text"},{"type":"codeVoice","code":"bcutil start-p2p"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"On Alice’s terminal double check that a connection is active using "},{"type":"codeVoice","code":"bcutil status"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Carol (Bitcoin Core)","level":3,"type":"heading","anchor":"Carol-Bitcoin-Core"},{"inlineContent":[{"text":"Adding Bitcoin Core to the mix can be done using a similar approach with ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/craigwrong\/bitcoin-lightning-node\/blob\/develop\/docker\/bitcoind\/Dockerfile","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Assuming you have ","type":"text"},{"code":"bitcoind","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"bitcoin-cli"},{"type":"text","text":" built as docker images, you can start Bitcoin Core nodes in the same "},{"type":"codeVoice","code":"regtest"},{"text":" network as your Swift Bitcoin nodes:","type":"text"}]},{"type":"codeListing","syntax":"sh","code":["docker run --name carol --rm -it --network bitcoin-regtest -v \/bitcoin_auth\/ bitcoind -chain=regtest -disablewallet -txindex -server -rpcallowip=0.0.0.0\/0 -rpcbind=0.0.0.0 -rpccookiefile=\/bitcoin_auth\/cookie"]},{"type":"paragraph","inlineContent":[{"text":"We use a custom volume to store the authentication cookie which we read from when running the ","type":"text"},{"type":"codeVoice","code":"bitcoin-cli"},{"text":" image for which we’ll also create an alias:","type":"text"}]},{"type":"codeListing","code":["alias bcutil=\"docker run --rm --network bitcoin-regtest --volumes-from carol bitcoin-cli -regtest -rpcconnect=carol  -rpccookiefile=\/bitcoin_auth\/cookie\"","prompt=\"carol: \"","bitcoin-cli -getinfo"],"syntax":"sh"},{"type":"paragraph","inlineContent":[{"type":"text","text":"From Alice’s terminal you can connect to Carol’s Bitcoin Core instance using "},{"type":"codeVoice","code":"bcutil connect -i carol"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Verify connection on Carol’s node: ","type":"text"},{"type":"codeVoice","code":"bitcoin-cli getpeerinfo"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To connect from Bitcoin Core to Swift Bitcoin use ","type":"text"},{"code":"bitcoin-cli addnode bob onetry","type":"codeVoice"},{"type":"text","text":"."}]}]}],"variants":[{"paths":["\/documentation\/bitcoin\/running"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building"],"title":"Essentials","generated":true,"anchor":"Essentials"}],"sections":[],"abstract":[{"type":"text","text":"Start a Bitcoin node service, query it and control it with the command line utility."}],"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running"},"metadata":{"role":"article","title":"Running","roleHeading":"Article","modules":[{"name":"Swift Bitcoin"}]},"references":{"doc://Bitcoin/documentation/Bitcoin/Building":{"type":"topic","title":"Building","abstract":[{"text":"Build the Swift Bitcoin library and executables using the Swift Toolchain or Docker.","type":"text"}],"role":"article","url":"\/documentation\/bitcoin\/building","kind":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building"},"https://github.com/craigwrong/bitcoin-lightning-node/blob/develop/docker/bitcoind/Dockerfile":{"titleInlineContent":[{"type":"text","text":"docker executable images"}],"identifier":"https:\/\/github.com\/craigwrong\/bitcoin-lightning-node\/blob\/develop\/docker\/bitcoind\/Dockerfile","title":"docker executable images","url":"https:\/\/github.com\/craigwrong\/bitcoin-lightning-node\/blob\/develop\/docker\/bitcoind\/Dockerfile","type":"link"},"doc://Bitcoin/documentation/Bitcoin":{"role":"collection","type":"topic","abstract":[{"text":"Pure-Swift Bitcoin client implementation with full node capabilities.","type":"text"}],"identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin","kind":"symbol","title":"Swift Bitcoin","url":"\/documentation\/bitcoin"},"doc://Bitcoin/documentation/Bitcoin/GettingStarted":{"abstract":[{"type":"text","text":"Swift Bitcoin let’s you integrate the different capabilities of the Bitcoin protocol into your own product."}],"kind":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","role":"article","title":"Getting Started","type":"topic","url":"\/documentation\/bitcoin\/gettingstarted"}}}