{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bitcoin\/gettingstarted"]}],"kind":"article","metadata":{"role":"article","modules":[{"name":"Swift Bitcoin"}],"title":"Getting Started","roleHeading":"Article"},"sections":[],"identifier":{"url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Preparation","type":"heading","anchor":"Preparation","level":2},{"anchor":"Add-the-package","text":"Add the package","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"In your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" dependencies add the package’s URL ","type":"text"},{"type":"codeVoice","code":"https:\/\/github.com\/swift-bitcoin\/swift-bitcoin"},{"text":".","type":"text"}]},{"level":3,"text":"Import the framework","anchor":"Import-the-framework","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To begin just import "},{"type":"codeVoice","code":"Bitcoin"},{"type":"text","text":"."}]},{"type":"codeListing","code":["import Bitcoin"],"syntax":"swift"},{"type":"heading","anchor":"Mine-a-transaction","text":"Mine a transaction","level":2},{"inlineContent":[{"type":"text","text":"In this example we will spin up a test Bitcoin server and use it to mine a transaction."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by generating a key pair and derive an address for our test."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Generate a secret key, corresponding public key, hash and address.","let secretKey = SecretKey()","let publicKey = secretKey.publicKey","let publicKeyHash = Data(Hash160.hash(data: publicKey.data))","let address = BitcoinAddress(publicKey, mainnet: false).description"]},{"inlineContent":[{"type":"text","text":"Prepare the Bitcoin service."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Instantiate a fresh Bitcoin service (regtest).","let service = BitcoinService()","","\/\/ Create the genesis block.","await service.createGenesisBlock()","","\/\/ Mine 100 blocks so block 1's coinbase output reaches maturity.","for _ in 0 ..< 100 {","    await service.generateTo(publicKey)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prepare our transaction."}]},{"type":"codeListing","code":["\/\/ Grab block 1's coinbase transaction and output.","let previousTransaction = await service.blockTransactions[1][0]","let previousOutput = previousTransaction.outputs[0]","let outpoint = previousTransaction.outpoint(for: 0)!","","\/\/ Create a new transaction spending from the previous transaction's outpoint.","let unsignedInput = TransactionInput(outpoint: outpoint, sequence: .final)","","\/\/ Specify the transaction's output. We'll leave 1000 sats on the table to tip miners. We'll re-use the origin address for simplicity.","let unsignedTransaction = BitcoinTransaction(","    inputs: [unsignedInput],","    outputs: [","        .init(value: 49_99_999_000, script: .init([","            .dup,","            .hash160,","            .pushBytes(publicKeyHash),","            .equalVerify,","            .checkSig","        ]))","    ])"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"We now need to sign the transaction using our secret key."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Sign the transaction by first calculating the signature hash.","let sigHash = unsignedTransaction.signatureHash(sighashType: .all, inputIndex: 0, previousOutput: previousOutput, scriptCode: previousOutput.script.data)","","\/\/ Obtain the signature using our secret key and append the signature hash type.","let signature = Signature(messageHash: sigHash, secretKey: secretKey, type: .ecdsa)","let signatureData = signature.data + [SighashType.all.value]","","\/\/ Sign our input by including the signature and public key.","let signedInput = TransactionInput(","    outpoint: unsignedInput.outpoint,","    sequence: unsignedInput.sequence,","    script: .init([","        .pushBytes(signatureData),","        .pushBytes(publicKey.data)","    ]),","    witness: unsignedInput.witness)","","\/\/ Put the signed input back into the transaction.","let signedTransaction = BitcoinTransaction(","    version: unsignedTransaction.version,","    locktime: unsignedTransaction.locktime,","    inputs: [signedInput],","    outputs: unsignedTransaction.outputs)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"We can verify that the transaction was signed correctly.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Make sure the transaction was signed correctly by verifying the scripts.","let isVerified = signedTransaction.verifyScript(previousOutputs: [previousOutput])","","#expect(isVerified)","\/\/ Yay! Our transaction is valid."]},{"inlineContent":[{"type":"text","text":"Now we’re ready to submit our signed transaction to the mempool."}],"type":"paragraph"},{"code":["\/\/ Submit the signed transaction to the mempool.","await service.addTransaction(signedTransaction)","","\/\/ The mempool should now contain our transaction.","let mempoolBefore = await service.mempool.count","#expect(mempoolBefore == 1)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"After confirming the transaction was accepted we can mine a block and get it confirmed.","type":"text"}]},{"code":["\/\/ Let's mine another block to confirm our transaction.","","\/\/ In this case we can use the address we created before.","","\/\/ Decode the address to get the public key hash.","let decodedPublicKeyHash = BitcoinAddress(address)!.hash","#expect(publicKeyHash == decodedPublicKeyHash)","","\/\/ Minde to the public key hash","await service.generateTo(decodedPublicKeyHash)","","\/\/ The mempool should now be empty.","let mempoolAfter = await service.mempool.count","#expect(mempoolAfter == 0)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Finally let’s make sure the transaction was confirmed in a block."}],"type":"paragraph"},{"type":"codeListing","code":["let blocks = await service.headers.count","#expect(blocks == 102)","","let lastBlock = await service.blockTransactions.last!","\/\/ Verify our transaction was confirmed in a block.","","#expect(lastBlock[1] == signedTransaction)","\/\/ Our transaction is now confirmed in the blockchain!"],"syntax":"swift"},{"inlineContent":[{"text":"We have effectively recreated the entire transaction lifecycle.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"To start using Swift Bitcoin just add it as a dependency to your package manifest."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://Bitcoin/documentation/Bitcoin":{"kind":"symbol","role":"collection","title":"Swift Bitcoin","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin","abstract":[{"type":"text","text":"Pure-Swift Bitcoin client implementation with full node capabilities."}],"type":"topic","url":"\/documentation\/bitcoin"}}}