{"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"metadata":{"title":"Getting Started","roleHeading":"Article","role":"article","modules":[{"name":"Swift Bitcoin"}]},"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"seeAlsoSections":[{"generated":true,"title":"Essentials","identifiers":["doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running"],"anchor":"Essentials"}],"variants":[{"paths":["\/documentation\/bitcoin\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"To start using Swift Bitcoin just add it as a dependency to your package manifest.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"text":"Preparation","type":"heading","level":2,"anchor":"Preparation"},{"text":"Add the package","level":3,"type":"heading","anchor":"Add-the-package"},{"inlineContent":[{"type":"text","text":"In your "},{"code":"Package.swift","type":"codeVoice"},{"text":" dependencies add the package’s URL ","type":"text"},{"type":"codeVoice","code":"https:\/\/github.com\/swift-bitcoin\/swift-bitcoin"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Import the framework","level":3,"type":"heading","anchor":"Import-the-framework"},{"inlineContent":[{"type":"text","text":"To begin just import "},{"code":"Bitcoin","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Bitcoin"]},{"level":2,"type":"heading","anchor":"Mine-a-transaction","text":"Mine a transaction"},{"inlineContent":[{"text":"In this example we will spin up a test Bitcoin server and use it to mine a transaction.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Let’s start by generating a key pair and derive an address for our test.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Generate a secret key, corresponding public key, hash and address.","let secretKey = SecretKey()","let publicKey = secretKey.publicKey","let address = BitcoinAddress(publicKey)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prepare the Bitcoin service."}]},{"syntax":"swift","code":["\/\/ Instantiate a fresh Bitcoin service (regtest).","let service = BitcoinService()","","\/\/ Create the genesis block.","await service.createGenesisBlock()","","\/\/ Mine 100 blocks so block 1's coinbase output reaches maturity.","for _ in 0 ..< 100 {","    await service.generateTo(publicKey)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Prepare our transaction.","type":"text"}]},{"code":["\/\/ Grab block 1's coinbase transaction and output.","let fundingTx = await service.transactions[1][0]","let prevout = fundingTx.outputs[0]","","\/\/ Create a new transaction spending from the previous transaction's outpoint.","let unsignedInput = TransactionInput(outpoint: fundingTx.outpoint(0))","","\/\/ Specify the transaction's output. We'll leave 1000 sats on the table to tip miners. We'll re-use the origin address for simplicity.","let spendingTx = BitcoinTransaction(","    inputs: [unsignedInput],","    outputs: [address.output(100)])"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"We now need to sign the transaction using our secret key.","type":"text"}],"type":"paragraph"},{"code":["let signer = TransactionSigner(transaction: spendingTx, prevouts: [prevout])","let signedTx = signer.sign(input: 0, with: secretKey)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can verify that the transaction was signed correctly."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Make sure the transaction was signed correctly by verifying the scripts.","let isVerified = signedTx.verifyScript(prevouts: [prevout])","","#expect(isVerified)","\/\/ Yay! Our transaction is valid."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we’re ready to submit our signed transaction to the mempool."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Submit the signed transaction to the mempool.","await service.addTransaction(signedTx)","","\/\/ The mempool should now contain our transaction.","let mempoolBefore = await service.mempool.count","#expect(mempoolBefore == 1)"]},{"type":"paragraph","inlineContent":[{"text":"After confirming the transaction was accepted we can mine a block and get it confirmed.","type":"text"}]},{"code":["\/\/ Let's mine another block to confirm our transaction.","","\/\/ In this case we can re-use the address we created before.","let publicKeyHash = Data(Hash160.hash(data: publicKey.data))","","\/\/ Minde to the public key hash","await service.generateTo(publicKeyHash)","","\/\/ The mempool should now be empty.","let mempoolAfter = await service.mempool.count","#expect(mempoolAfter == 0)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Finally let’s make sure the transaction was confirmed in a block.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let blocks = await service.headers.count","#expect(blocks == 102)","","let lastBlock = await service.transactions.last!","\/\/ Verify our transaction was confirmed in a block.","","#expect(lastBlock[1] == signedTx)","\/\/ Our transaction is now confirmed in the blockchain!"]},{"inlineContent":[{"type":"text","text":"We have effectively recreated the entire transaction lifecycle."}],"type":"paragraph"}]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted"},"references":{"doc://Bitcoin/documentation/Bitcoin/Running":{"type":"topic","title":"Running","url":"\/documentation\/bitcoin\/running","kind":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","role":"article","abstract":[{"type":"text","text":"Swift Bitcoin comes with two executables:"}]},"doc://Bitcoin/documentation/Bitcoin/Building":{"abstract":[{"type":"text","text":"To build Swift Bitcoin you’ll either need Docker or a working copy of the Swift Toolchain installed on your system."}],"url":"\/documentation\/bitcoin\/building","role":"article","title":"Building","kind":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","type":"topic"},"doc://Bitcoin/documentation/Bitcoin":{"role":"collection","kind":"symbol","title":"Swift Bitcoin","type":"topic","abstract":[{"type":"text","text":"Pure-Swift Bitcoin client implementation with full node capabilities."}],"url":"\/documentation\/bitcoin","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin"}}}