{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted"},"seeAlsoSections":[{"identifiers":["doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running"],"anchor":"Essentials","title":"Essentials","generated":true}],"metadata":{"roleHeading":"Article","modules":[{"name":"Swift Bitcoin"}],"title":"Getting Started","role":"article"},"sections":[],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","level":1,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To start using Swift Bitcoin as a library just add it as a dependency to your package manifest."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instructions on running a node please refer to "},{"identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","isActive":true,"type":"reference"},{"text":" instead.","type":"text"}]},{"anchor":"Preparation","type":"heading","text":"Preparation","level":2},{"anchor":"Add-the-package","text":"Add the package","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":" dependencies add the package’s URL ","type":"text"},{"code":"https:\/\/github.com\/swift-bitcoin\/swift-bitcoin","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"Import the framework","level":3,"anchor":"Import-the-framework","type":"heading"},{"inlineContent":[{"type":"text","text":"To begin just import "},{"code":"Bitcoin","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import Bitcoin"],"type":"codeListing"},{"type":"heading","text":"Mine a transaction","level":2,"anchor":"Mine-a-transaction"},{"inlineContent":[{"type":"text","text":"In this example we will spin up a test Bitcoin server and use it to mine a transaction."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Let’s start by generating a key pair and derive an address for our test."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ Generate a secret key, corresponding public key, hash and address.","let secretKey = SecretKey()","let publicKey = secretKey.publicKey","let address = BitcoinAddress(publicKey)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Prepare the Bitcoin service."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Instantiate a fresh Bitcoin service (regtest).","let service = BitcoinService()","","\/\/ Create the genesis block.","await service.createGenesisBlock()","","\/\/ Mine 100 blocks so block 1's coinbase output reaches maturity.","for _ in 0 ..< 100 {","    await service.generateTo(publicKey)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prepare our transaction."}]},{"code":["\/\/ Grab block 1's coinbase transaction and output.","let fundingTx = await service.transactions[1][0]","let prevout = fundingTx.outputs[0]","","\/\/ Create a new transaction spending from the previous transaction's outpoint.","let unsignedInput = TransactionInput(outpoint: fundingTx.outpoint(0))","","\/\/ Specify the transaction's output. We'll leave 1000 sats on the table to tip miners. We'll re-use the origin address for simplicity.","let spendingTx = BitcoinTransaction(","    inputs: [unsignedInput],","    outputs: [address.output(100)])"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"We now need to sign the transaction using our secret key."}],"type":"paragraph"},{"code":["let signer = TransactionSigner(transaction: spendingTx, prevouts: [prevout])","let signedTx = signer.sign(input: 0, with: secretKey)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"We can verify that the transaction was signed correctly."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Make sure the transaction was signed correctly by verifying the scripts.","let isVerified = signedTx.verifyScript(prevouts: [prevout])","","#expect(isVerified)","\/\/ Yay! Our transaction is valid."]},{"inlineContent":[{"type":"text","text":"Now we’re ready to submit our signed transaction to the mempool."}],"type":"paragraph"},{"code":["\/\/ Submit the signed transaction to the mempool.","await service.addTransaction(signedTx)","","\/\/ The mempool should now contain our transaction.","let mempoolBefore = await service.mempool.count","#expect(mempoolBefore == 1)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After confirming the transaction was accepted we can mine a block and get it confirmed."}]},{"syntax":"swift","code":["\/\/ Let's mine another block to confirm our transaction.","","\/\/ In this case we can re-use the address we created before.","let publicKeyHash = Data(Hash160.hash(data: publicKey.data))","","\/\/ Minde to the public key hash","await service.generateTo(publicKeyHash)","","\/\/ The mempool should now be empty.","let mempoolAfter = await service.mempool.count","#expect(mempoolAfter == 0)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally let’s make sure the transaction was confirmed in a block."}]},{"type":"codeListing","code":["let blocks = await service.headers.count","#expect(blocks == 102)","","let lastBlock = await service.transactions.last!","\/\/ Verify our transaction was confirmed in a block.","","#expect(lastBlock[1] == signedTx)","\/\/ Our transaction is now confirmed in the blockchain!"],"syntax":"swift"},{"inlineContent":[{"text":"We have effectively recreated the entire transaction lifecycle.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Swift Bitcoin let’s you integrate the different capabilities of the Bitcoin protocol into your own product."}],"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bitcoin\/gettingstarted"]}],"kind":"article","references":{"doc://Bitcoin/documentation/Bitcoin/Building":{"role":"article","title":"Building","type":"topic","abstract":[{"text":"Build the Swift Bitcoin library and executables using the Swift Toolchain or Docker.","type":"text"}],"identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","kind":"article","url":"\/documentation\/bitcoin\/building"},"doc://Bitcoin/documentation/Bitcoin/Running":{"abstract":[{"text":"Start a Bitcoin node service, query it and control it with the command line utility.","type":"text"}],"url":"\/documentation\/bitcoin\/running","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","type":"topic","title":"Running","kind":"article","role":"article"},"doc://Bitcoin/documentation/Bitcoin":{"role":"collection","title":"Swift Bitcoin","type":"topic","abstract":[{"text":"Pure-Swift Bitcoin client implementation with full node capabilities.","type":"text"}],"identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin","url":"\/documentation\/bitcoin","kind":"symbol"}}}