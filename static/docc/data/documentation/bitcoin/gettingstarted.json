{"kind":"article","abstract":[{"text":"Swift Bitcoin let’s you integrate the different capabilities of the Bitcoin protocol into your own product.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"generated":true,"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running"]}],"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"To start using Swift Bitcoin as a library just add it as a dependency to your package manifest.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For instructions on running a node please refer to "},{"identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","type":"reference","isActive":true},{"text":" instead.","type":"text"}],"type":"paragraph"},{"text":"Preparation","anchor":"Preparation","type":"heading","level":2},{"type":"heading","text":"Add the package","anchor":"Add-the-package","level":3},{"inlineContent":[{"text":"In your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"type":"text","text":" dependencies add the package’s URL "},{"code":"https:\/\/github.com\/swift-bitcoin\/swift-bitcoin","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Import the framework","anchor":"Import-the-framework"},{"inlineContent":[{"type":"text","text":"To begin just import "},{"type":"codeVoice","code":"Bitcoin"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["import Bitcoin"],"syntax":"swift"},{"level":2,"type":"heading","anchor":"Mine-a-transaction","text":"Mine a transaction"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example we will spin up a test Bitcoin server and use it to mine a transaction."}]},{"type":"paragraph","inlineContent":[{"text":"Let’s start by generating a key pair and derive an address for our test.","type":"text"}]},{"syntax":"swift","code":["\/\/ Generate a secret key, corresponding public key, hash and address.","let secretKey = SecretKey()","let publicKey = secretKey.publicKey","let address = LegacyAddress(publicKey)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Prepare the Blockchain service.","type":"text"}]},{"code":["\/\/ Create a fresh blockchain service instance (on regtest).","let blockchain = BlockchainService()","","\/\/ Mine 100 blocks so block 1's coinbase output reaches maturity.","for _ in 0 ..< 100 {","    await blockchain.generateTo(publicKey)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Prepare our transaction."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Grab block 1's coinbase transaction and output.","let fundingTx = await blockchain.blocks[1].txs[0]","let prevout = fundingTx.outs[0]","","\/\/ Create a new transaction spending from the previous transaction's outpoint.","let unsignedInput = TxIn(outpoint: fundingTx.outpoint(0))","","\/\/ Specify the transaction's output. We'll leave 1000 sats on the table to tip miners. We'll re-use the origin address for simplicity.","let spendingTx = BitcoinTx(ins: [unsignedInput], outs: [address.out(100)])"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"We now need to sign the transaction using our secret key."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let signer = TxSigner(tx: spendingTx, prevouts: [prevout])","let signedTx = signer.sign(txIn: 0, with: secretKey)"]},{"inlineContent":[{"type":"text","text":"We can verify that the transaction was signed correctly."}],"type":"paragraph"},{"code":["\/\/ Make sure the transaction was signed correctly by verifying the scripts.","let isVerified = signedTx.verifyScript(prevouts: [prevout])","","#expect(isVerified)","\/\/ Yay! Our transaction is valid."],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Now we’re ready to submit our signed transaction to the mempool."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ Submit the signed transaction to the mempool.","try await blockchain.addTx(signedTx)","","\/\/ The mempool should now contain our transaction.","#expect(await blockchain.mempool.count == 1)"]},{"inlineContent":[{"type":"text","text":"After confirming the transaction was accepted we can mine a block and get it confirmed."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Let's mine another block to confirm our transaction.","","\/\/ In this case we can re-use the address we created before.","let publicKeyHash = Data(Hash160.hash(data: publicKey.data))","","\/\/ Minde to the public key hash","await blockchain.generateTo(publicKeyHash)","","\/\/ The mempool should now be empty.","#expect(await blockchain.mempool.count == 0)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally let’s make sure the transaction was confirmed in a block."}]},{"code":["let blocks = await blockchain.blocks.count","#expect(blocks == 102)","","let lastBlock = await blockchain.blocks.last!","\/\/ Verify our transaction was confirmed in a block.","","#expect(lastBlock.txs[1] == signedTx)","\/\/ Our transaction is now confirmed in the blockchain!"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have effectively recreated the entire transaction lifecycle."}]}]}],"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"identifier":{"url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","interfaceLanguage":"swift"},"metadata":{"title":"Getting Started","roleHeading":"Article","role":"article","modules":[{"name":"Swift Bitcoin"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/bitcoin\/gettingstarted"]}],"references":{"doc://Bitcoin/documentation/Bitcoin/Running":{"kind":"article","abstract":[{"text":"Start a Bitcoin node service, query it and control it with the command line utility.","type":"text"}],"url":"\/documentation\/bitcoin\/running","type":"topic","role":"article","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","title":"Running"},"doc://Bitcoin/documentation/Bitcoin/Building":{"abstract":[{"text":"Build the Swift Bitcoin library and executables using the Swift Toolchain or Docker.","type":"text"}],"type":"topic","role":"article","kind":"article","url":"\/documentation\/bitcoin\/building","title":"Building","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building"},"doc://Bitcoin/documentation/Bitcoin":{"kind":"symbol","abstract":[{"text":"Pure-Swift Bitcoin client implementation with full node capabilities.","type":"text"}],"url":"\/documentation\/bitcoin","type":"topic","role":"collection","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin","title":"Swift Bitcoin"}}}