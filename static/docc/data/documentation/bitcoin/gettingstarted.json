{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/GettingStarted","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running"],"title":"Essentials","anchor":"Essentials","generated":true}],"variants":[{"paths":["\/documentation\/bitcoin\/gettingstarted"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","sections":[],"metadata":{"title":"Getting Started","roleHeading":"Article","role":"article","modules":[{"name":"Swift Bitcoin"}]},"abstract":[{"text":"Swift Bitcoin let’s you integrate the different capabilities of the Bitcoin protocol into your own product.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Bitcoin\/documentation\/Bitcoin"]]},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"To start using Swift Bitcoin as a library just add it as a dependency to your package manifest.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instructions on running a node please refer to "},{"identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","isActive":true,"type":"reference"},{"text":" instead.","type":"text"}]},{"anchor":"Preparation","type":"heading","level":2,"text":"Preparation"},{"type":"heading","anchor":"Add-the-package","text":"Add the package","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In your "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":" dependencies add the package’s URL "},{"code":"https:\/\/github.com\/swift-bitcoin\/swift-bitcoin","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Import-the-framework","type":"heading","level":3,"text":"Import the framework"},{"inlineContent":[{"text":"To begin just import ","type":"text"},{"type":"codeVoice","code":"Bitcoin"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import Bitcoin"]},{"level":2,"type":"heading","anchor":"Mine-a-transaction","text":"Mine a transaction"},{"inlineContent":[{"type":"text","text":"In this example we will spin up a test Bitcoin server and use it to mine a transaction."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Let’s start by generating a key pair and derive an address for our test.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Generate a secret key, corresponding public key, hash and address.","let secretKey = SecretKey()","let pubkey = secretKey.pubkey","let address = LegacyAddress(pubkey)"]},{"inlineContent":[{"type":"text","text":"Prepare the Blockchain service."}],"type":"paragraph"},{"code":["\/\/ Create a fresh blockchain service instance (on regtest).","let blockchain = BlockchainService()","","\/\/ Mine 100 blocks so block 1's coinbase output reaches maturity.","for _ in 0 ..< 100 {","    await blockchain.generateTo(pubkey)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Prepare our transaction.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Grab block 1's coinbase transaction and output.","let fundingTx = await blockchain.blocks[1].txs[0]","let prevout = fundingTx.outs[0]","","\/\/ Create a new transaction spending from the previous transaction's outpoint.","let unsignedInput = TxIn(outpoint: fundingTx.outpoint(0))","","\/\/ Specify the transaction's output. We'll leave 1000 sats on the table to tip miners. We'll re-use the origin address for simplicity.","let spendingTx = BitcoinTx(ins: [unsignedInput], outs: [address.out(100)])"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We now need to sign the transaction using our secret key."}]},{"type":"codeListing","syntax":"swift","code":["let signer = TxSigner(tx: spendingTx, prevouts: [prevout])","let signedTx = signer.sign(txIn: 0, with: secretKey)"]},{"inlineContent":[{"type":"text","text":"We can verify that the transaction was signed correctly."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Make sure the transaction was signed correctly by verifying the scripts.","let isVerified = signedTx.verifyScript(prevouts: [prevout])","","#expect(isVerified)","\/\/ Yay! Our transaction is valid."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we’re ready to submit our signed transaction to the mempool."}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Submit the signed transaction to the mempool.","try await blockchain.addTx(signedTx)","","\/\/ The mempool should now contain our transaction.","#expect(await blockchain.mempool.count == 1)"]},{"inlineContent":[{"type":"text","text":"After confirming the transaction was accepted we can mine a block and get it confirmed."}],"type":"paragraph"},{"code":["\/\/ Let's mine another block to confirm our transaction.","","\/\/ In this case we can re-use the address we created before.","let pubkeyHash = Data(Hash160.hash(data: pubkey.data))","","\/\/ Minde to the public key hash","await blockchain.generateTo(pubkeyHash)","","\/\/ The mempool should now be empty.","#expect(await blockchain.mempool.count == 0)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally let’s make sure the transaction was confirmed in a block."}]},{"syntax":"swift","code":["let blocks = await blockchain.blocks.count","#expect(blocks == 102)","","let lastBlock = await blockchain.blocks.last!","\/\/ Verify our transaction was confirmed in a block.","","#expect(lastBlock.txs[1] == signedTx)","\/\/ Our transaction is now confirmed in the blockchain!"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We have effectively recreated the entire transaction lifecycle."}]}]}],"references":{"doc://Bitcoin/documentation/Bitcoin/Running":{"abstract":[{"type":"text","text":"Start a Bitcoin node service, query it and control it with the command line utility."}],"type":"topic","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Running","title":"Running","kind":"article","role":"article","url":"\/documentation\/bitcoin\/running"},"doc://Bitcoin/documentation/Bitcoin":{"kind":"symbol","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin","abstract":[{"text":"Pure-Swift Bitcoin client implementation with full node capabilities.","type":"text"}],"role":"collection","url":"\/documentation\/bitcoin","title":"Swift Bitcoin","type":"topic"},"doc://Bitcoin/documentation/Bitcoin/Building":{"kind":"article","role":"article","type":"topic","url":"\/documentation\/bitcoin\/building","identifier":"doc:\/\/Bitcoin\/documentation\/Bitcoin\/Building","title":"Building","abstract":[{"text":"Build the Swift Bitcoin library and executables using the Swift Toolchain or Docker.","type":"text"}]}}}